name: BarBuddy iOS Build and Test

on:
  push:
    paths-ignore:
      - 'README.md'
      - 'backend/**'
      - 'frontend/**'
      - '.gitignore'
      - 'docs/**'
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  build-and-test:
    name: iOS Build and Test
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache SwiftPM
        uses: actions/cache@v4
        with:
          path: .build
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Verify Xcode Version
        run: xcodebuild -version

      - name: Determine Build Configuration
        id: config
        run: |
          if [ -n "$(find . -name "*.xcworkspace" -maxdepth 1)" ]; then
            file_to_build=$(find . -name "*.xcworkspace" -maxdepth 1 | head -1)
            filetype_parameter="workspace"
          elif [ -n "$(find . -name "*.xcodeproj" -maxdepth 1)" ]; then
            file_to_build=$(find . -name "*.xcodeproj" -maxdepth 1 | head -1)
            filetype_parameter="project"
          else
            echo "Error: No .xcworkspace or .xcodeproj found"
            exit 1
          fi
          scheme_list_json=$(xcodebuild -list -json -${filetype_parameter} "${file_to_build}" | tr -d "\n" || echo "{}")
          default_scheme=$(echo "$scheme_list_json" | ruby -e "require 'json'; parsed = JSON.parse(STDIN.gets); puts parsed['project']['targets'][0] rescue puts parsed['workspace']['schemes'][0] rescue ''")
          if [ -z "$default_scheme" ]; then
            default_scheme=$(xcodebuild -list -${filetype_parameter} "${file_to_build}" | grep -A1 "Schemes:" | tail -n +2 | head -1 | xargs || '')
            if [ -z "$default_scheme" ]; then
              echo "Error: Could not determine default scheme."
              exit 1
            fi
          fi
          available_iphone_16_line=$(xcrun simctl list devices available | grep "iPhone 16" | grep -v "iPad" | head -1)
          if [ -n "$available_iphone_16_line" ]; then
            device=$(echo "$available_iphone_16_line" | sed -E 's/^[[:space:]]*([^(]+).*/\1/' | xargs)
          else
            device="iPhone 16"
          fi
          echo "file_to_build=${file_to_build}" >> $GITHUB_OUTPUT
          echo "filetype_parameter=${filetype_parameter}" >> $GITHUB_OUTPUT
          echo "scheme=${default_scheme}" >> $GITHUB_OUTPUT
          echo "device=${device}" >> $GITHUB_OUTPUT

      - name: Boot Simulator Early
        run: |
          UDID=$(xcrun simctl list devices available | grep "${{ steps.config.outputs.device }}" | grep -oE '[A-F0-9\-]{36}' | head -1)
          if [ -n "$UDID" ]; then
            xcrun simctl boot "$UDID" || true
            echo "Booted simulator with UDID: $UDID"
          else
            echo "Simulator not found, will let xcodebuild handle it."
          fi
          xcrun simctl list | grep Booted

      - name: Build for Testing
        run: |
          xcodebuild build-for-testing \
            -scheme "${{ steps.config.outputs.scheme }}" \
            -${{ steps.config.outputs.filetype_parameter }} "${{ steps.config.outputs.file_to_build }}" \
            -destination "platform=iOS Simulator,name=${{ steps.config.outputs.device }}" \
            -configuration Debug \
            CODE_SIGNING_ALLOWED=NO

      - name: Run Tests (Parallel)
        run: |
          xcodebuild test-without-building \
            -scheme "${{ steps.config.outputs.scheme }}" \
            -${{ steps.config.outputs.filetype_parameter }} "${{ steps.config.outputs.file_to_build }}" \
            -destination "platform=iOS Simulator,name=${{ steps.config.outputs.device }}" \
            -configuration Debug \
            -parallel-testing-enabled YES \
            CODE_SIGNING_ALLOWED=NO

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-results
          path: |
            ~/Library/Logs/DiagnosticReports/
            DerivedData/Logs/Test/
