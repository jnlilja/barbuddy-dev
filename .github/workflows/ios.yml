name: BarBuddy iOS Build and Test

on:
  push:
    paths-ignore:
      - 'README.md'
      - 'backend/**'
      - 'frontend/**'
      - '.gitignore'
      - 'docs/**'
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  build-and-test:
    name: iOS Build and Test
    runs-on: macos-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Verify Xcode Version
        run: xcodebuild -version

      # Cache CocoaPods dependencies
      - name: Cache CocoaPods
        uses: actions/cache@v4
        if: hashFiles('**/Podfile.lock') != ''
        with:
          path: |
            Pods
            ~/.cocoapods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      # Cache Swift Package Manager dependencies
      - name: Cache SPM Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/org.swift.swiftpm
            ~/Library/Developer/Xcode/DerivedData/**/SourcePackages
            .build
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      # Cache DerivedData for faster incremental builds
      - name: Cache DerivedData
        uses: actions/cache@v4
        with:
          path: |
            DerivedData
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-deriveddata-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-deriveddata-${{ github.ref_name }}-
            ${{ runner.os }}-deriveddata-

      # Install CocoaPods if Podfile exists
      - name: Install CocoaPods Dependencies
        if: hashFiles('**/Podfile') != ''
        run: |
          if [ -f "Podfile" ]; then
            pod install --repo-update
          fi

      # Install Carthage dependencies if Cartfile exists
      - name: Install Carthage Dependencies
        if: hashFiles('**/Cartfile') != ''
        run: |
          if [ -f "Cartfile" ]; then
            brew install carthage
            carthage bootstrap --platform iOS --cache-builds
          fi

      - name: List Available Simulators
        run: |
          echo "Available iOS simulators:"
          xcrun simctl list devices available | grep iOS

      - name: Determine Build Configuration
        id: config
        run: |
          # Find project/workspace file (search recursively)
          if [ -n "$(find . -name "*.xcworkspace")" ]; then
            file_to_build=$(find . -name "*.xcworkspace" | head -1)
            filetype_parameter="workspace"
          elif [ -n "$(find . -name "*.xcodeproj")" ]; then
            file_to_build=$(find . -name "*.xcodeproj" | head -1)
            filetype_parameter="project"
          else
            echo "Error: No .xcworkspace or .xcodeproj found"
            exit 1
          fi

          # Get scheme - robust approach
          scheme_list=$(xcodebuild -list -${filetype_parameter} "${file_to_build}")
          echo "Available schemes and targets:"
          echo "$scheme_list"

          # Try to get the first scheme
          default_scheme=$(echo "$scheme_list" | awk '/Schemes:/,0' | tail -n +2 | head -1 | xargs)
          if [ -z "$default_scheme" ]; then
            echo "Error: Could not determine default scheme"
            exit 1
          fi

          # Find any available iPhone simulator
          available_simulators=$(xcrun simctl list devices available)
          device=$(echo "$available_simulators" | grep -E "^    iPhone 16 " | grep -v unavailable | head -1 | sed -E 's/^[[:space:]]*([^(]+).*/\1/' | xargs)

          if [ -z "$device" ]; then
            echo "Error: No iPhone simulator found in available devices"
            echo "Available devices:"
            echo "$available_simulators"
            exit 1
          fi

          echo "file_to_build=${file_to_build}" >> $GITHUB_OUTPUT
          echo "filetype_parameter=${filetype_parameter}" >> $GITHUB_OUTPUT
          echo "scheme=${default_scheme}" >> $GITHUB_OUTPUT
          echo "device=${device}" >> $GITHUB_OUTPUT

          echo "Configuration:"
          echo "  File: ${file_to_build}"
          echo "  Type: ${filetype_parameter}"
          echo "  Scheme: ${default_scheme}"
          echo "  Device: ${device}"

      - name: Prepare Simulator
        run: |
          echo "Preparing simulator: ${{ steps.config.outputs.device }}"

          # Use the selected device name to find or create a simulator UDID
          SIMULATOR_UDID=$(xcrun simctl list devices available | grep "${{ steps.config.outputs.device }}" | grep -v unavailable | head -1 | grep -oE '\([A-F0-9-]+\)' | tr -d '()' || '')

          if [ -z "$SIMULATOR_UDID" ]; then
            echo "Could not find a suitable simulator for ${{ steps.config.outputs.device }}"
            echo "Available simulators:"
            xcrun simctl list devices available
            exit 1
          fi

          echo "Using simulator UDID: $SIMULATOR_UDID"

          # Boot the simulator
          xcrun simctl boot "$SIMULATOR_UDID" || echo "Simulator may already be booted"

          # Wait for boot to complete
          xcrun simctl bootstatus "$SIMULATOR_UDID" -b

          # Additional wait for stability
          sleep 5

          echo "simulator_udid=${SIMULATOR_UDID}" >> $GITHUB_OUTPUT

      - name: Build for Testing
        timeout-minutes: 10
        run: |
          set -o pipefail
          xcodebuild build-for-testing \
            -scheme "${{ steps.config.outputs.scheme }}" \
            -${{ steps.config.outputs.filetype_parameter }} "${{ steps.config.outputs.file_to_build }}" \
            -destination "platform=iOS Simulator,name=${{ steps.config.outputs.device }}" \
            -configuration Debug \
            -derivedDataPath DerivedData \
            CODE_SIGNING_ALLOWED=NO \
            | xcpretty || true

      - name: Run Tests
        timeout-minutes: 10
        run: |
          set -o pipefail

          # Check if there are actually any tests to run
          if xcodebuild test-without-building \
            -scheme "${{ steps.config.outputs.scheme }}" \
            -${{ steps.config.outputs.filetype_parameter }} "${{ steps.config.outputs.file_to_build }}" \
            -destination "platform=iOS Simulator,name=${{ steps.config.outputs.device }}" \
            -configuration Debug \
            -derivedDataPath DerivedData \
            -parallel-testing-enabled NO \
            -resultBundlePath TestResults \
            CODE_SIGNING_ALLOWED=NO \
            | xcpretty --report junit --output test-results.xml; then
            echo "Tests completed successfully"
          else
            echo "Tests failed or no tests found"
            # Check if it's because there are no tests
            if [ ! -d "DerivedData/Build/Products/Debug-iphonesimulator" ]; then
              echo "No test products found - this scheme may not have test targets"
              exit 0  # Don't fail the build if there are simply no tests
            else
              exit 1  # Fail if tests exist but failed to run
            fi
          fi

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            test-results.xml
            TestResults/
            DerivedData/Logs/
        continue-on-error: true
