name: BarBuddy iOS Build and Test

on:
  push:
    paths-ignore:
      - 'README.md'
      - 'backend/**'
      - 'frontend/**'
      - '.gitignore'
      - 'docs/**'
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  build-and-test:
    name: iOS Build and Test
    runs-on: macos-15
    timeout-minutes: 25
    strategy:
      matrix:
        ios-version: ['17.2', '18.0']
      fail-fast: false
      max-parallel: 2

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.3'

      - name: Verify Xcode Version
        run: xcodebuild -version

      # Optimized cache for SPM only
      - name: Cache Swift Package Manager
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/org.swift.swiftpm
            ~/Library/Developer/Xcode/DerivedData/**/SourcePackages
            .build
            **/SourcePackages
          key: ${{ runner.os }}-spm-${{ matrix.ios-version }}-${{ hashFiles('**/Package.resolved', '**/Package.swift') }}
          restore-keys: |
            ${{ runner.os }}-spm-${{ matrix.ios-version }}-
            ${{ runner.os }}-spm-

      # Lightweight DerivedData cache (excluding SourcePackages to avoid conflicts)
      - name: Cache Build Data
        uses: actions/cache@v4
        with:
          path: |
            DerivedData/Build/Intermediates.noindex
            DerivedData/Build/Products
            DerivedData/ModuleCache.noindex
          key: ${{ runner.os }}-build-${{ matrix.ios-version }}-${{ hashFiles('**/Package.resolved', '**/*.xcodeproj/project.pbxproj') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ matrix.ios-version }}-
            ${{ runner.os }}-build-

      # Cache iOS Simulator Runtimes
      - name: Cache iOS Simulator Runtimes
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/com.apple.dt.Xcode/Downloads
            ~/Library/Developer/CoreSimulator/Profiles/Runtimes
          key: ${{ runner.os }}-simulator-${{ matrix.ios-version }}-xcode-16.3
          restore-keys: |
            ${{ runner.os }}-simulator-${{ matrix.ios-version }}-
            ${{ runner.os }}-simulator-

      - name: Determine Build Configuration
        id: config
        run: |
          # Find project/workspace file
          if [ -n "$(find . -name "*.xcworkspace")" ]; then
            file_to_build=$(find . -name "*.xcworkspace" | head -1)
            filetype_parameter="workspace"
          elif [ -n "$(find . -name "*.xcodeproj")" ]; then
            file_to_build=$(find . -name "*.xcodeproj" | head -1)
            filetype_parameter="project"
          else
            echo "Error: No .xcworkspace or .xcodeproj found"
            exit 1
          fi

          # Get scheme
          scheme_list=$(xcodebuild -list -${filetype_parameter} "${file_to_build}")
          echo "Available schemes:"
          echo "$scheme_list"

          default_scheme=$(echo "$scheme_list" | awk '/Schemes:/,0' | tail -n +2 | head -1 | xargs)
          if [ -z "$default_scheme" ]; then
            echo "Error: Could not determine default scheme"
            exit 1
          fi

          # Find iPhone 16 simulator specifically
          device=$(xcrun simctl list devices available | grep -E "iPhone 16" | head -1 | sed -E 's/^[[:space:]]*([^(]+).*/\1/' | xargs)
          if [ -z "$device" ]; then
            echo "No iPhone 16 simulators found. Available devices:"
            xcrun simctl list devices available | grep iPhone
            exit 1
          fi

          echo "file_to_build=${file_to_build}" >> $GITHUB_OUTPUT
          echo "filetype_parameter=${filetype_parameter}" >> $GITHUB_OUTPUT
          echo "scheme=${default_scheme}" >> $GITHUB_OUTPUT
          echo "device=${device}" >> $GITHUB_OUTPUT

          echo "Configuration:"
          echo "  File: ${file_to_build}"
          echo "  Type: ${filetype_parameter}"
          echo "  Scheme: ${default_scheme}"
          echo "  Device: ${device}"

      # Install iOS runtime if needed
      - name: Install iOS Runtime
        run: |
          REQUIRED_IOS_VERSION="${{ matrix.ios-version }}"
          echo "Checking for iOS $REQUIRED_IOS_VERSION runtime..."
          
          if xcrun simctl list runtimes | grep -q "iOS $REQUIRED_IOS_VERSION"; then
            echo "✓ iOS $REQUIRED_IOS_VERSION runtime available"
          else
            echo "Installing iOS $REQUIRED_IOS_VERSION runtime..."
            xcrun simctl runtime install "iOS $REQUIRED_IOS_VERSION" || {
              echo "⚠️  Could not install iOS $REQUIRED_IOS_VERSION, using available runtime"
            }
          fi

      # Resolve SPM dependencies with dependency graph handling
      - name: Resolve Swift Package Dependencies
        run: |
          echo "=== Resolving Swift Package Manager dependencies ==="
          
          # Clear cache if commit message contains flag
          if echo "${{ github.event.head_commit.message || '' }}" | grep -q '\[clear-spm-cache\]'; then
            echo "Clearing SPM cache due to commit message flag"
            rm -rf ~/Library/Caches/org.swift.swiftpm
            rm -rf .build
            rm -rf **/SourcePackages
            rm -rf DerivedData
          fi
          
          # Show current Package.swift and Package.resolved if they exist
          echo "=== Package Configuration ==="
          if [ -f "Package.swift" ]; then
            echo "Found Package.swift:"
            cat Package.swift
          fi
          
          if [ -f "Package.resolved" ]; then
            echo "Found Package.resolved:"
            cat Package.resolved
          fi
          
          # Look for Package.swift in project directory or Xcode project
          if find . -name "Package.swift" -o -path "*/*.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved" | grep -q .; then
            echo "Swift Package Manager configuration detected"
            
            # Multiple resolution attempts with different strategies
            echo "=== Strategy 1: Standard resolution ==="
            if xcodebuild -resolvePackageDependencies \
              -scheme "${{ steps.config.outputs.scheme }}" \
              -${{ steps.config.outputs.filetype_parameter }} "${{ steps.config.outputs.file_to_build }}" \
              -derivedDataPath DerivedData; then
              echo "✓ Dependencies resolved successfully"
            else
              echo "❌ Standard resolution failed, trying clean approach..."
              
              echo "=== Strategy 2: Clean resolution ==="
              rm -rf ~/Library/Caches/org.swift.swiftpm
              rm -rf DerivedData
              
              if xcodebuild -resolvePackageDependencies \
                -scheme "${{ steps.config.outputs.scheme }}" \
                -${{ steps.config.outputs.filetype_parameter }} "${{ steps.config.outputs.file_to_build }}" \
                -derivedDataPath DerivedData; then
                echo "✓ Clean resolution successful"
              else
                echo "❌ Clean resolution failed, trying workspace approach..."
                
                echo "=== Strategy 3: Workspace-first resolution ==="
                # Sometimes we need to resolve at the workspace level first
                if [ "${{ steps.config.outputs.filetype_parameter }}" = "workspace" ]; then
                  xcodebuild -resolvePackageDependencies \
                    -workspace "${{ steps.config.outputs.file_to_build }}" \
                    -derivedDataPath DerivedData || true
                fi
                
                # Final attempt with verbose logging
                echo "=== Strategy 4: Verbose resolution ==="
                xcodebuild -resolvePackageDependencies \
                  -scheme "${{ steps.config.outputs.scheme }}" \
                  -${{ steps.config.outputs.filetype_parameter }} "${{ steps.config.outputs.file_to_build }}" \
                  -derivedDataPath DerivedData \
                  -verbose || {
                  echo "❌ All resolution strategies failed"
                  echo "Available schemes:"
                  xcodebuild -list -${{ steps.config.outputs.filetype_parameter }} "${{ steps.config.outputs.file_to_build }}"
                  exit 1
                }
              fi
            fi
            
            # Verify package downloads
            echo "=== Verifying Package Downloads ==="
            if [ -d "DerivedData/SourcePackages/checkouts" ]; then
              echo "Downloaded packages:"
              ls -la DerivedData/SourcePackages/checkouts/
              
              # Check specifically for SDWebImage packages
              if [ -d "DerivedData/SourcePackages/checkouts/SDWebImage" ]; then
                echo "✓ SDWebImage package found"
              else
                echo "❌ SDWebImage package missing"
              fi
              
              if [ -d "DerivedData/SourcePackages/checkouts/SDWebImageSwiftUI" ]; then
                echo "✓ SDWebImageSwiftUI package found"
              else
                echo "❌ SDWebImageSwiftUI package missing"
              fi
            else
              echo "❌ No SourcePackages/checkouts directory found"
            fi
            
            # Show final Package.resolved
            if [ -f "${{ steps.config.outputs.file_to_build }}/project.xcworkspace/xcshareddata/swiftpm/Package.resolved" ]; then
              echo "=== Final Package.resolved ==="
              cat "${{ steps.config.outputs.file_to_build }}/project.xcworkspace/xcshareddata/swiftpm/Package.resolved"
            fi
            
          else
            echo "⚠️  No Swift Package Manager configuration found"
            echo "Looking for Package.swift files:"
            find . -name "Package.swift" -type f
            echo "Looking for Package.resolved files:"
            find . -name "Package.resolved" -type f
          fi

      - name: Prepare iPhone 16 Simulator
        id: simulator
        run: |
          echo "Preparing iPhone 16 simulator: ${{ steps.config.outputs.device }}"

          # Find iPhone 16 simulator UDID
          SIMULATOR_UDID=$(xcrun simctl list devices available | grep "${{ steps.config.outputs.device }}" | head -1 | grep -oE '\([A-F0-9-]+\)' | tr -d '()')

          if [ -z "$SIMULATOR_UDID" ]; then
            echo "Could not find iPhone 16 simulator"
            echo "Available iPhone simulators:"
            xcrun simctl list devices available | grep iPhone
            exit 1
          fi

          echo "Using iPhone 16 simulator: $SIMULATOR_UDID"

          # Boot simulator
          xcrun simctl boot "$SIMULATOR_UDID" || echo "Simulator may already be booted"
          xcrun simctl bootstatus "$SIMULATOR_UDID" -b

          echo "simulator_udid=${SIMULATOR_UDID}" >> $GITHUB_OUTPUT

      # Check if tests exist
      - name: Check for Tests
        id: check-tests
        run: |
          if find . -name "*Tests.swift" -o -name "*Test.swift" | grep -q .; then
            echo "has-tests=true" >> $GITHUB_OUTPUT
            echo "✓ Test files found"
          else
            echo "has-tests=false" >> $GITHUB_OUTPUT
            echo "ℹ️  No test files found"
          fi

      - name: Build for Testing
        timeout-minutes: 12
        run: |
          set -o pipefail
          
          echo "=== Building for Testing ==="
          echo "Scheme: ${{ steps.config.outputs.scheme }}"
          echo "File: ${{ steps.config.outputs.file_to_build }}"
          echo "Device: ${{ steps.config.outputs.device }}"
          
          # First, let's try a clean build approach
          echo "=== Cleaning previous builds ==="
          xcodebuild clean \
            -scheme "${{ steps.config.outputs.scheme }}" \
            -${{ steps.config.outputs.filetype_parameter }} "${{ steps.config.outputs.file_to_build }}" \
            -derivedDataPath DerivedData
          
          # Build with dependency resolution integrated
          echo "=== Attempting integrated build-for-testing ==="
          if xcodebuild build-for-testing \
            -scheme "${{ steps.config.outputs.scheme }}" \
            -${{ steps.config.outputs.filetype_parameter }} "${{ steps.config.outputs.file_to_build }}" \
            -destination "platform=iOS Simulator,name=${{ steps.config.outputs.device }}" \
            -configuration Debug \
            -derivedDataPath DerivedData \
            CODE_SIGNING_ALLOWED=NO \
            | xcpretty --color --report junit --output build-results.xml; then
            echo "✓ Build successful"
          else
            echo "❌ Build failed, trying with fresh dependency resolution..."
            
            # Clear and re-resolve dependencies
            rm -rf DerivedData/SourcePackages
            xcodebuild -resolvePackageDependencies \
              -scheme "${{ steps.config.outputs.scheme }}" \
              -${{ steps.config.outputs.filetype_parameter }} "${{ steps.config.outputs.file_to_build }}" \
              -derivedDataPath DerivedData
            
            echo "=== Retry build after fresh resolution ==="
            xcodebuild build-for-testing \
              -scheme "${{ steps.config.outputs.scheme }}" \
              -${{ steps.config.outputs.filetype_parameter }} "${{ steps.config.outputs.file_to_build }}" \
              -destination "platform=iOS Simulator,name=${{ steps.config.outputs.device }}" \
              -configuration Debug \
              -derivedDataPath DerivedData \
              CODE_SIGNING_ALLOWED=NO \
              -verbose \
              | xcpretty --color --report junit --output build-results.xml
          fi

      - name: Run Tests
        if: steps.check-tests.outputs.has-tests == 'true'
        timeout-minutes: 8
        run: |
          set -o pipefail
          xcodebuild test-without-building \
            -scheme "${{ steps.config.outputs.scheme }}" \
            -${{ steps.config.outputs.filetype_parameter }} "${{ steps.config.outputs.file_to_build }}" \
            -destination "platform=iOS Simulator,name=${{ steps.config.outputs.device }}" \
            -configuration Debug \
            -derivedDataPath DerivedData \
            -parallel-testing-enabled NO \
            -resultBundlePath TestResults \
            CODE_SIGNING_ALLOWED=NO \
            | xcpretty --color --report junit --output test-results.xml

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-ios-${{ matrix.ios-version }}
          path: |
            test-results.xml
            build-results.xml
            TestResults/
            DerivedData/Logs/
        continue-on-error: true

      # Optional: Upload build artifacts
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: build-logs-ios-${{ matrix.ios-version }}
          path: |
            DerivedData/Logs/
        continue-on-error: true
